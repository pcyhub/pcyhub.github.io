<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ssh</title>
      <link href="/posts/ee8dcc44/"/>
      <url>/posts/ee8dcc44/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-ssh登录"><a href="#1-ssh登录" class="headerlink" title="1.ssh登录"></a>1.ssh登录</h1><h2 id="1-1基本用法"><a href="#1-1基本用法" class="headerlink" title="1.1基本用法"></a>1.1基本用法</h2><p>登录：</p><p><code>ssh user@hostname</code></p><p><code>user</code>：用户名</p><p><code>hostname</code>:ip地址</p><p>特定端口登录（默认22端口）</p><p><code>ssh user@hostname -p 22</code></p><h2 id="1-2配置文件"><a href="#1-2配置文件" class="headerlink" title="1.2配置文件"></a>1.2配置文件</h2><p>创建文件<code>~/.ssh/config</code></p><p>然后在文件中输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host myserver1</span><br><span class="line">Hostname </span><br><span class="line">user</span><br><span class="line">Host myserver2</span><br><span class="line">Hostname </span><br><span class="line">user</span><br></pre></td></tr></table></figure><p>之后使用中直接用别名<code>myserver1</code>  <code>myserver2</code> 即可登录</p><h2 id="1-3-密钥登录"><a href="#1-3-密钥登录" class="headerlink" title="1.3 密钥登录"></a>1.3 密钥登录</h2><p>创建密钥</p><p><code>ssh-keygen</code></p><p>回车即可</p><p>执行结束后，<code>~/.ssh/</code>目录下会出现：</p><p><code>id_rsa</code>:私钥</p><p><code>id_ras.pub</code>:公钥</p><p>登录服务器时将公钥内容复制到<code>myserver</code>中<code>~/.ssh/authorized_keys</code>文件</p><p>也可一键添加</p><p><code>ssh-copy-id myserver</code></p><h2 id="1-4执行命令"><a href="#1-4执行命令" class="headerlink" title="1.4执行命令"></a>1.4执行命令</h2><p>命令格式：<code>ssh user@hostname command</code></p><p>例如:</p><p><code>ssh myserver &#39;for((i=0;i&lt;=10;i++)) do echo $i; done&#39;</code>(;表示换行)</p><h2 id="1-5-scp传文件"><a href="#1-5-scp传文件" class="headerlink" title="1.5 scp传文件"></a>1.5 scp传文件</h2><p>格式：<br><code>scp source destination</code></p><p>将<code>source</code>路径下的文件复制到<code>destination</code>中</p><p>一次复制多个文件：</p><p><code>scp source1 source2 destination</code></p><p>复制文件夹：</p><p><code>scp -r ~/tmp myserver:/home/acs/</code></p><p>将本地家目录中的tmp文件夹复制到myserver服务器中的&#x2F;home&#x2F;acs&#x2F;目录下。</p><p><code>scp -r ~/tmp myserver:homework/</code></p><p>将myserver服务器中的~&#x2F;homework&#x2F;文件夹复制到本地的当前路径下</p><p><code>scp  -r myserver:/~/homework .</code></p><p>使用<code>scp</code>配置其他服务器的<code>vim</code>和<code>tmux</code><br><code>scp ~/.vimrc ~/.tmux.conf myserver:</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell语法</title>
      <link href="/posts/4652f0c6/"/>
      <url>/posts/4652f0c6/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="1-头文件"><a href="#1-头文件" class="headerlink" title="1.头文件"></a><strong>1.头文件</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">！/bin/bash</span></span><br></pre></td></tr></table></figure><h1 id="2-运行方式"><a href="#2-运行方式" class="headerlink" title="2.运行方式"></a><strong>2.运行方式</strong></h1><p>作为可执行文件 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod +x test.sh#增加权限</span><br><span class="line">./test.sh# 当前路径下执行</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>用解释器执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash test.sh</span><br></pre></td></tr></table></figure><h1 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a><strong>3.注释</strong></h1><h2 id="3-1单行注释"><a href="#3-1单行注释" class="headerlink" title="3.1单行注释"></a><strong>3.1单行注释</strong></h2><p>每行中#之后的内容均是注释</p><h2 id="3-2多行注释"><a href="#3-2多行注释" class="headerlink" title="3.2多行注释"></a><strong>3.2多行注释</strong></h2><p>格式：（EOF可换为其他字符）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:&lt;&lt;EOF</span><br><span class="line"></span><br><span class="line">第一行注释</span><br><span class="line"></span><br><span class="line">第二行注释</span><br><span class="line"></span><br><span class="line">第三行注释</span><br><span class="line"></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h1 id="4-定义变量"><a href="#4-定义变量" class="headerlink" title="4.定义变量"></a><strong>4.定义变量</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name1=&#x27;yxc&#x27; # 单引号定义字符串</span><br><span class="line"></span><br><span class="line">name2=&quot;yxc&quot; # 双引号定义字符串</span><br><span class="line"></span><br><span class="line">name3=yxc  # 也可以不加引号，同样表示字符串</span><br></pre></td></tr></table></figure><h1 id="5-使用变量"><a href="#5-使用变量" class="headerlink" title="5.使用变量"></a><strong>5.使用变量</strong></h1><p>使用变量，需要加上 <code>$</code> 符号，或者 <code>$&#123;&#125; </code>符号。花括号是可选的，主要为了帮助解释器识别变量边界。（最好使用{}）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"></span><br><span class="line">echo $name # 输出yxc</span><br><span class="line"></span><br><span class="line">echo $&#123;name&#125; # 输出yxc</span><br><span class="line"></span><br><span class="line">echo $&#123;name&#125;acwing # 输出yxcacwing</span><br></pre></td></tr></table></figure><h2 id="5-1只读变量"><a href="#5-1只读变量" class="headerlink" title="5.1只读变量"></a><strong>5.1只读变量</strong></h2><p>使用 <code>readonly</code> 或者  <code>declare</code> 可以将变量变为只读。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line"></span><br><span class="line">readonly name</span><br><span class="line"></span><br><span class="line">declare -r name # 两种写法均可</span><br><span class="line"></span><br><span class="line">name=abc # 会报错，因为此时name只读</span><br></pre></td></tr></table></figure><h2 id="5-2删除变量"><a href="#5-2删除变量" class="headerlink" title="5.2删除变量"></a><strong>5.2删除变量</strong></h2><p><code>unset</code>可以删除变量</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">unset name</span><br><span class="line">echo $name  # 输出空行</span><br></pre></td></tr></table></figure><h1 id="6-变量类型"><a href="#6-变量类型" class="headerlink" title="6.变量类型"></a><strong>6.变量类型</strong></h1><h2 id="6-1自定义变量（局部变量）"><a href="#6-1自定义变量（局部变量）" class="headerlink" title="6.1自定义变量（局部变量）"></a><strong>6.1自定义变量（局部变量）</strong></h2><p>​子进程不能访问的变量</p><h2 id="6-2环境变量（全局变量）"><a href="#6-2环境变量（全局变量）" class="headerlink" title="6.2环境变量（全局变量）"></a><strong>6.2环境变量（全局变量）</strong></h2><p>​子进程可以访问的变量</p><p>自定义变量改成环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ name=yxc  # 定义变量</span><br><span class="line">acs@9e0ebfcd82d7:~$ export name  # 第一种方法</span><br><span class="line">acs@9e0ebfcd82d7:~$ declare -x name  # 第二种方法</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>环境变量改为自定义变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ export name=yxc  # 定义环境变量</span><br><span class="line">acs@9e0ebfcd82d7:~$ declare +x name  # 改为自定义变量</span><br></pre></td></tr></table></figure><h1 id="7-字符串"><a href="#7-字符串" class="headerlink" title="7.字符串"></a><strong>7.字符串</strong></h1><p>字符串可以用单引号，也可以用双引号，也可以不用引号。</p><p>单引号与双引号的区别：</p><p>​单引号中的内容会原样输出，不会执行、不会取变量；<br>​双引号中的内容可以执行、可以取变量；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=yxc  # 不用引号</span><br><span class="line">echo &#x27;hello, $name \&quot;hh\&quot;&#x27;  # 单引号字符串，输出 hello, $name \&quot;hh\&quot;</span><br><span class="line">echo &quot;hello, $name \&quot;hh\&quot;&quot;  # 双引号字符串，输出 hello, yxc &quot;hh&quot;</span><br></pre></td></tr></table></figure><h2 id="7-1获取字符串长度"><a href="#7-1获取字符串长度" class="headerlink" title="7.1获取字符串长度"></a><strong>7.1获取字符串长度</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;yxc&quot;</span><br><span class="line">echo $&#123;#name&#125; #输出3</span><br></pre></td></tr></table></figure><h2 id="7-2提取子串"><a href="#7-2提取子串" class="headerlink" title="7.2提取子串"></a><strong>7.2提取子串</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;hello,yxc&quot;</span><br><span class="line">echo $&#123;name:0:5&#125;#提取从0开始的5个字符</span><br></pre></td></tr></table></figure><h1 id="8-默认变量"><a href="#8-默认变量" class="headerlink" title="8.默认变量"></a><strong>8.默认变量</strong></h1><p>在执行shell脚本时，可以向脚本传递参数。$1是第一个参数，$2是第二个参数，以此类推。特殊的，$0是文件名（包含路径）。例如：</p><p>创建文件test.sh：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">echo &quot;文件名：&quot;$0</span><br><span class="line">echo &quot;第一个参数：&quot;$1</span><br><span class="line">echo &quot;第二个参数：&quot;$2</span><br><span class="line">echo &quot;第三个参数：&quot;$3</span><br><span class="line">echo &quot;第四个参数：&quot;$4</span><br></pre></td></tr></table></figure><p>然后执行该脚本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh </span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh 1 2 3 4</span><br><span class="line">文件名：./test.sh</span><br><span class="line">第一个参数：1</span><br><span class="line">第二个参数：2</span><br><span class="line">第三个参数：3</span><br><span class="line">第四个参数：4</span><br></pre></td></tr></table></figure><h3 id="其它参数相关变量"><a href="#其它参数相关变量" class="headerlink" title="其它参数相关变量"></a><strong>其它参数相关变量</strong></h3><p><img src="https://img-1314486531.cos.ap-shanghai.myqcloud.com/%E5%85%B6%E4%BB%96%E5%8F%82%E6%95%B0%E7%9B%B8%E5%85%B3%E5%8F%98%E9%87%8F.png"></p><h1 id="9-数组"><a href="#9-数组" class="headerlink" title="9.数组"></a><strong>9.数组</strong></h1><h2 id="9-1定义"><a href="#9-1定义" class="headerlink" title="9.1定义"></a><strong>9.1定义</strong></h2><p>数组用小括号表示，元素之间用空格隔开。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br></pre></td></tr></table></figure><p>也可以直接定义数组中某个元素的值：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array[0]=1</span><br><span class="line">array[1]=abc</span><br><span class="line">array[2]=&quot;def&quot;</span><br><span class="line">array[100]=yxc</span><br></pre></td></tr></table></figure><h2 id="9-2读取数组中某个元素的值"><a href="#9-2读取数组中某个元素的值" class="headerlink" title="9.2读取数组中某个元素的值"></a><strong>9.2读取数组中某个元素的值</strong></h2><p>格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;array[index]&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br><span class="line">echo $&#123;array[0]&#125;</span><br><span class="line">echo $&#123;array[1]&#125;</span><br><span class="line">echo $&#123;array[2]&#125;</span><br><span class="line">echo $&#123;array[100]&#125;</span><br></pre></td></tr></table></figure><h2 id="9-3读取整个数组"><a href="#9-3读取整个数组" class="headerlink" title="9.3读取整个数组"></a><strong>9.3读取整个数组</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br><span class="line"></span><br><span class="line">echo $&#123;array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><h2 id="9-4数组长度"><a href="#9-4数组长度" class="headerlink" title="9.4数组长度"></a><strong>9.4数组长度</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[@]&#125;  # 第一种写法</span></span></span><br><span class="line"><span class="meta prompt_">$</span><span class="language-bash">&#123;<span class="comment">#array[*]&#125;  # 第二种写法</span></span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">array=(1 abc &quot;def&quot; yxc)</span><br><span class="line"></span><br><span class="line">echo $&#123;#array[@]&#125;  # 第一种写法</span><br><span class="line">echo $&#123;#array[*]&#125;  # 第二种写法</span><br></pre></td></tr></table></figure><h1 id="10-expr命令"><a href="#10-expr命令" class="headerlink" title="10.expr命令"></a><strong>10.expr命令</strong></h1><p><code>expr</code>命令用于求表达式的值，格式为：</p><p><code>expr</code> 表达式</p><p>表达式说明：</p><p><strong>用空格隔开每一项</strong></p><p>​用反斜杠放在shell特定的字符前面（发现表达式运行错误时，可以试试转义）<br>​对包含空格和其他特殊字符的字符串要用引号括起来<br>​<code>expr</code>会在<code>stdout</code>中输出结果。如果为逻辑关系表达式，则结果为真，<code>stdout</code>为1，否则为0。<br>​<code>expr</code>的<code>exit code</code>：如果为逻辑关系表达式，则结果为真，<code>exit code</code>为0，否则为1。</p><h2 id="10-1字符串表达式"><a href="#10-1字符串表达式" class="headerlink" title="10.1字符串表达式"></a><strong>10.1字符串表达式</strong></h2><p><strong>1.</strong><code>length STRING</code><br>返回<code>STRING</code>的长度</p><p><strong>2.</strong><code>index STRING CHARSET</code><br>CHARSET中任意单个字符在STRING中最前面的字符位置，下标从1开始。如果在STRING中完全不存在CHARSET中的字符，则返回0。</p><p><strong>3.</strong><code>substr STRING POSITION LENGTH</code></p><p>返回<code>STRING</code>字符串中从<code>POSITION</code>(<strong>下标从1开始</strong>)开始，长度最大为<code>LENGTH</code>的子串。如果<code>POSITION</code>或<code>LENGTH</code>为负数，0或非数值，则返回空字符串。</p><p>示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str=&quot;Hello World!&quot;</span><br><span class="line"></span><br><span class="line">echo `expr length &quot;$str&quot;`  # ``不是单引号，表示执行该命令，输出12</span><br><span class="line">echo `expr index &quot;$str&quot; aWd`  # 输出7，下标从1开始</span><br><span class="line">echo `expr substr &quot;$str&quot; 2 3`  # 输出 ell</span><br></pre></td></tr></table></figure><h2 id="10-2整数表达式"><a href="#10-2整数表达式" class="headerlink" title="10.2整数表达式"></a><strong>10.2整数表达式</strong></h2><p><code>expr</code>支持普通的算术操作，算术表达式优先级低于字符串表达式，高于逻辑关系表达式。</p><p><code>+-</code></p><p>加减运算。两端参数会转换为整数，如果转换失败则报错。</p><p><code>* / %</code></p><p>乘，除，取模运算。两端参数会转换为整数，如果转换失败则报错。</p><p><code>() </code>可以该表优先级，但需要用反斜杠转义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a + $b`  # 输出7</span><br><span class="line">echo `expr $a - $b`  # 输出-1</span><br><span class="line">echo `expr $a \* $b`  # 输出12，*需要转义</span><br><span class="line">echo `expr $a / $b`  # 输出0，整除</span><br><span class="line">echo `expr $a % $b` # 输出3</span><br><span class="line">echo `expr \( $a + 1 \) \* \( $b + 1 \)`  # 输出20，值为(a + 1) * (b + 1)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="10-3逻辑关系表达式"><a href="#10-3逻辑关系表达式" class="headerlink" title="10.3逻辑关系表达式"></a><strong>10.3逻辑关系表达式</strong></h2><p><code>|</code><br>如果第一个参数非空且非0，则返回第一个参数的值，否则返回第二个参数的值，但要求第二个参数的值也是非空或非0，否则返回0。如果第一个参数是非空或非0时，不会计算第二个参数。<br><code>&amp;</code><br>如果两个参数都非空且非0，则返回第一个参数，否则返回0。如果第一个参为0或为空，则不会计算第二个参数。</p><p><code>&lt; &lt;= = == != &gt;= &gt;</code><br>比较两端的参数，如果为true，则返回1，否则返回0。”&#x3D;&#x3D;”是”&#x3D;”的同义词。”expr”首先尝试将两端参数转换为整数，并做算术比较，如果转换失败，则按字符集排序规则做字符比较。</p><p><code>() </code>可以该变优先级，但需要用反斜杠转义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">echo `expr $a \&gt; $b`  # 输出0，&gt;需要转义</span><br><span class="line">echo `expr $a &#x27;&lt;&#x27; $b`  # 输出1，也可以将特殊字符用引号引起来</span><br><span class="line">echo `expr $a &#x27;&gt;=&#x27; $b`  # 输出0</span><br><span class="line">echo `expr $a \&lt;\= $b`  # 输出1</span><br><span class="line"></span><br><span class="line">c=0</span><br><span class="line">d=5</span><br><span class="line"></span><br><span class="line">echo `expr $c \&amp; $d`  # 输出0</span><br><span class="line">echo `expr $a \&amp; $b`  # 输出3</span><br><span class="line">echo `expr $c \| $d`  # 输出5</span><br><span class="line">echo `expr $a \| $b`  # 输出3</span><br></pre></td></tr></table></figure><h1 id="11-read命令"><a href="#11-read命令" class="headerlink" title="11.read命令"></a><strong>11.read命令</strong></h1><p><code>read</code>命令用于从标准输入中读取单行数据。当读到文件结束符时，<code>exit code</code>为1，否则为0。</p><p>参数说明</p><p><code>-p</code>: 后面可以接提示信息<br><code>-t</code>：后面跟秒数，定义输入字符的等待时间，超过等待时间后会自动忽略此命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ read name  # 读入name的值</span><br><span class="line">acwing yxc  # 标准输入</span><br><span class="line">acs@9e0ebfcd82d7:~$ echo $name  # 输出name的值</span><br><span class="line">acwing yxc  #标准输出</span><br><span class="line">acs@9e0ebfcd82d7:~$ read -p &quot;Please input your name: &quot; -t 30 name  # 读入name的值，等待时间30秒</span><br><span class="line">Please input your name: acwing yxc  # 标准输入</span><br><span class="line">acs@9e0ebfcd82d7:~$ echo $name  # 输出name的值</span><br><span class="line">acwing yxc  # 标准输出</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="12-echo命令"><a href="#12-echo命令" class="headerlink" title="12.echo命令"></a><strong>12.echo命令</strong></h1><p><code>echo</code>用于输出字符串。命令格式：</p><p><code>echo STRING</code></p><h2 id="12-1显示普通字符串"><a href="#12-1显示普通字符串" class="headerlink" title="12.1显示普通字符串"></a><strong>12.1显示普通字符串</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello AC Terminal&quot;</span><br><span class="line">echo Hello AC Terminal  # 引号可以省略</span><br></pre></td></tr></table></figure><h2 id="12-2显示转义字符"><a href="#12-2显示转义字符" class="headerlink" title="12.2显示转义字符"></a><strong>12.2显示转义字符</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;\&quot;Hello AC Terminal\&quot;&quot;  # 注意只能使用双引号，如果使用单引号，则不转义</span><br><span class="line">echo \&quot;Hello AC Terminal\&quot;  # 也可以省略双引号</span><br></pre></td></tr></table></figure><h2 id="12-3显示变量"><a href="#12-3显示变量" class="headerlink" title="12.3显示变量"></a><strong>12.3显示变量</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=yxc</span><br><span class="line">echo &quot;My name is $name&quot;  # 输出 My name is yxc</span><br></pre></td></tr></table></figure><h2 id="12-4显示换行"><a href="#12-4显示换行" class="headerlink" title="12.4显示换行"></a><strong>12.4显示换行</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi\n&quot;  # -e 开启转义</span><br><span class="line">echo &quot;acwing&quot;</span><br></pre></td></tr></table></figure><h2 id="12-5显示不换行"><a href="#12-5显示不换行" class="headerlink" title="12.5显示不换行"></a><strong>12.5显示不换行</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hi \c&quot; # -e 开启转义 \c 不换行</span><br><span class="line">echo &quot;acwing&quot;</span><br></pre></td></tr></table></figure><h2 id="12-6显示结果定向至文件"><a href="#12-6显示结果定向至文件" class="headerlink" title="12.6显示结果定向至文件"></a><strong>12.6显示结果定向至文件</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;Hello World&quot; &gt; output.txt  # 将内容以覆盖的方式输出到output.txt中</span><br></pre></td></tr></table></figure><h2 id="12-7原样输出字符串，不进行转义或取变量-用单引号"><a href="#12-7原样输出字符串，不进行转义或取变量-用单引号" class="headerlink" title="12.7原样输出字符串，不进行转义或取变量(用单引号)"></a><strong>12.7原样输出字符串，不进行转义或取变量(用单引号)</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name=acwing</span><br><span class="line">echo &#x27;$name\&quot;&#x27;</span><br></pre></td></tr></table></figure><h2 id="12-8显示命令的执行结果"><a href="#12-8显示命令的执行结果" class="headerlink" title="12.8显示命令的执行结果"></a><strong>12.8显示命令的执行结果</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo `date`</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">输出</span></span><br><span class="line">Wed Sep 1 11:45:33 CST 2021</span><br></pre></td></tr></table></figure><h1 id="13printf命令"><a href="#13printf命令" class="headerlink" title="13printf命令"></a><strong>13<code>printf</code>命令</strong></h1><p>printf命令用于格式化输出，类似于C&#x2F;C++中的printf函数。</p><p>默认不会在字符串末尾添加换行符。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">printf &quot;%10d.\n&quot; 123  # 占10位，右对齐</span><br><span class="line">printf &quot;%-10.2f.\n&quot; 123.123321  # 占10位，保留2位小数，左对齐</span><br><span class="line">printf &quot;My name is %s\n&quot; &quot;yxc&quot;  # 格式化输出字符串</span><br><span class="line">printf &quot;%d * %d = %d\n&quot;  2 3 `expr 2 \* 3` # 表达式的值作为参数</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       123.</span><br><span class="line">123.12    .</span><br><span class="line">My name is yxc</span><br><span class="line">2 * 3 = 6</span><br></pre></td></tr></table></figure><h1 id="14-test命令与判断符号"><a href="#14-test命令与判断符号" class="headerlink" title="14.test命令与判断符号[ ]"></a><strong>14.test命令与判断符号[ ]</strong></h1><h2 id="14-1逻辑运算符-amp-amp-和"><a href="#14-1逻辑运算符-amp-amp-和" class="headerlink" title="14.1逻辑运算符&amp;&amp;和||"></a><strong>14.1逻辑运算符&amp;&amp;和||</strong></h2><p><code>&amp;&amp; </code>表示与，<code>|| </code>表示或<br>二者具有短路原则：<br><code>expr1 &amp;&amp; expr2</code>：当<code>expr1</code>为假时，直接忽略<code>expr2</code><br><code>expr1 || expr2</code>：当<code>expr1</code>为真时，直接忽略<code>expr2</code><br>表达式的<code>exit code</code>为0，表示真；为非零，表示假。（与C&#x2F;C++中的定义相反）</p><h2 id="14-2test命令"><a href="#14-2test命令" class="headerlink" title="14.2test命令"></a><strong>14.2test命令</strong></h2><p><code>test</code>命令用于判断文件类型，以及对变量做比较。</p><p><code>test</code>命令用<code>exit code</code>返回结果，而不是使用<code>stdout</code>。0表示真，非0表示假。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">test 2 -lt 3  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">acs@9e0ebfcd82d7:~$ test -e test.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">acs@9e0ebfcd82d7:~$ test -e test2.sh &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><h2 id="14-3文件类型判断"><a href="#14-3文件类型判断" class="headerlink" title="14.3文件类型判断"></a><strong>14.3文件类型判断</strong></h2><p><code>test -e filename  # 判断文件是否存在</code></p><p><img src="https://img-1314486531.cos.ap-shanghai.myqcloud.com/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD.png" alt="文件类型判断"></p><h2 id="14-4文件权限判断"><a href="#14-4文件权限判断" class="headerlink" title="14.4文件权限判断"></a><strong>14.4文件权限判断</strong></h2><p><code>test -r filename  # 判断文件是否可读</code></p><p><img src="https://img-1314486531.cos.ap-shanghai.myqcloud.com/%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90%E5%88%A4%E6%96%AD.png" alt="文件权限判断"></p><h2 id="14-5整数间的比较"><a href="#14-5整数间的比较" class="headerlink" title="14.5整数间的比较"></a><strong>14.5整数间的比较</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test $a -eq $b  # a是否等于b</span><br></pre></td></tr></table></figure><p><img src="https://img-1314486531.cos.ap-shanghai.myqcloud.com/%E6%95%B4%E6%95%B0%E9%97%B4%E6%AF%94%E8%BE%83.png" alt="整数间比较"></p><h2 id="14-6字符串比较"><a href="#14-6字符串比较" class="headerlink" title="14.6字符串比较"></a><strong>14.6字符串比较</strong></h2><p><img src="https://img-1314486531.cos.ap-shanghai.myqcloud.com/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83.png" alt="字符串比较"></p><h2 id="14-7多重条件判定"><a href="#14-7多重条件判定" class="headerlink" title="14.7多重条件判定"></a><strong>14.7多重条件判定</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">test -r filename -a -x filename</span><br></pre></td></tr></table></figure><p><img src="https://img-1314486531.cos.ap-shanghai.myqcloud.com/%E5%A4%9A%E9%87%8D%E6%9D%A1%E4%BB%B6%E5%88%A4%E5%AE%9A.png" alt="多重条件判定"></p><h2 id="14-8判断符号"><a href="#14-8判断符号" class="headerlink" title="14.8判断符号[]"></a><strong>14.8判断符号<code>[]</code></strong></h2><p><code>[]</code>与<code>test</code>用法几乎一模一样，更常用于if语句中。另外<code>[[]]</code>是<code>[]</code>的加强版，支持的特性更多。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[ 2 -lt 3 ]  # 为真，返回值为0</span><br><span class="line">echo $?  # 输出上个命令的返回值，输出0</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ ls  # 列出当前目录下的所有文件</span><br><span class="line">homework  output.txt  test.sh  tmp</span><br><span class="line">acs@9e0ebfcd82d7:~$ [ -e test.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">exist  # test.sh 文件存在</span><br><span class="line">acs@9e0ebfcd82d7:~$ [ -e test2.sh ] &amp;&amp; echo &quot;exist&quot; || echo &quot;Not exist&quot;</span><br><span class="line">Not exist  # testh2.sh 文件不存在</span><br></pre></td></tr></table></figure><p><strong><code>[]</code>内的每一项都要用空格隔开</strong><br><strong>中括号内的变量，最好用双引号括起来</strong><br><strong>中括号内的常数，最好用单或双引号括起来</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name=&quot;acwing yxc&quot;</span><br><span class="line">[ $name == &quot;acwing yxc&quot; ]  # 错误，等价于 [ acwing yxc == &quot;acwing yxc&quot; ]，参数太多</span><br><span class="line">[ &quot;$name&quot; == &quot;acwing yxc&quot; ]  # 正确</span><br></pre></td></tr></table></figure><h1 id="15-判断语句"><a href="#15-判断语句" class="headerlink" title="15.判断语句"></a><strong>15.判断语句</strong></h1><h2 id="15-1-if…then形式"><a href="#15-1-if…then形式" class="headerlink" title="15.1 if…then形式"></a><strong>15.1 if…then形式</strong></h2><p>类似于<code>C/C++</code>中的<code>if-else</code>语句</p><h3 id="单层if"><a href="#单层if" class="headerlink" title="单层if"></a>单层<code>if</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=3</span><br><span class="line">b=4</span><br><span class="line"></span><br><span class="line">if [ &quot;$a&quot; -lt &quot;$b&quot; ] &amp;&amp; [ &quot;$a&quot; -gt 2 ]</span><br><span class="line">then</span><br><span class="line">    echo $&#123;a&#125;在范围内</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>3在范围内</code></p><h3 id="单层if-else"><a href="#单层if-else" class="headerlink" title="单层if-else"></a>单层<code>if-else</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="多层if-elif-elif-else"><a href="#多层if-elif-elif-else" class="headerlink" title="多层if-elif-elif-else"></a>多层<code>if-elif-elif-else</code></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">if condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">elif condition</span><br><span class="line">then</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">else</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h1 id="15-2case…esac形式"><a href="#15-2case…esac形式" class="headerlink" title="15.2case…esac形式"></a><strong>15.2<code>case…esac</code>形式</strong></h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">case $变量名称 in</span><br><span class="line">    值1)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;  # 类似于C/C++中的break</span><br><span class="line">    值2)</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">    *)  # 类似于C/C++中的default</span><br><span class="line">        语句1</span><br><span class="line">        语句2</span><br><span class="line">        ...</span><br><span class="line">        ;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h1 id="16-循环语句"><a href="#16-循环语句" class="headerlink" title="16.循环语句"></a><strong>16.循环语句</strong></h1><h2 id="16-1-for-in-do-done"><a href="#16-1-for-in-do-done" class="headerlink" title="16.1 for...in...do...done"></a><strong>16.1 <code>for...in...do...done</code></strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">for var in val1 val2 val3</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例1，输出a 2 cc，每个元素一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in a 2 cc</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例2，输出当前路径下的所有文件名，每个文件名一行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for file in `ls`</span><br><span class="line">do</span><br><span class="line">    echo $file</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例3，输出1-10</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in $(seq 1 10)</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例4，使用<code>&#123;1..10&#125;</code> 或者 <code>&#123;a..z&#125;</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for i in &#123;a..z&#125;</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="16-2-for-…-…-…-do…done"><a href="#16-2-for-…-…-…-do…done" class="headerlink" title="16.2 for ((…;…;…)) do…done"></a><strong>16.2 <code>for ((…;…;…)) do…done</code></strong></h2><p>命令格式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for ((expression; condition; expression))</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>输出1-10，每行一个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1; i&lt;=10; i++))</span><br><span class="line">do</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="16-3-while…do…done循环"><a href="#16-3-while…do…done循环" class="headerlink" title="16.3 while…do…done循环"></a><strong>16.3 <code>while…do…done</code>循环</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>示例，文件结束符为<code>Ctrl+d</code>，输入文件结束符后<code>read</code>指令返回false。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    echo $name</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="16-4-until…do…done循环"><a href="#16-4-until…do…done循环" class="headerlink" title="16.4 until…do…done循环"></a><strong>16.4 <code>until…do…done</code>循环</strong></h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">until condition</span><br><span class="line">do</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>当用户输入<code>yes</code>或者<code>YES</code>时结束，否则一直等待读入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">until [ &quot;$&#123;word&#125;&quot; == &quot;yes&quot; ] || [ &quot;$&#123;word&#125;&quot; == &quot;YES&quot; ]</span><br><span class="line">do</span><br><span class="line">    read -p &quot;Please input yes/YES to stop this program: &quot; word</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="16-5-break命令"><a href="#16-5-break命令" class="headerlink" title="16.5 break命令"></a><strong>16.5 break命令</strong></h2><p>跳出当前一层循环,<code>break</code>不能跳出<code>case</code>语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">while read name</span><br><span class="line">do</span><br><span class="line">    for ((i=1;i&lt;=10;i++))</span><br><span class="line">    do</span><br><span class="line">        case $i in</span><br><span class="line">            8)</span><br><span class="line">                break</span><br><span class="line">                ;;</span><br><span class="line">            *)</span><br><span class="line">                echo $i</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">    done</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该示例每读入非EOF的字符串，会输出一遍1-7。<br>该程序可以输入<code>Ctrl+d</code>文件结束符来结束，也可以直接用<code>Ctrl+c</code>杀掉该进程。</p><h2 id="16-6-continue命令"><a href="#16-6-continue命令" class="headerlink" title="16.6 continue命令"></a><strong>16.6 continue命令</strong></h2><p>跳出当前循环</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for ((i=1;i&lt;=10;i++))</span><br><span class="line">do</span><br><span class="line">    if [ `expr $i % 2` -eq 0 ]</span><br><span class="line">    then</span><br><span class="line">        continue</span><br><span class="line">    fi</span><br><span class="line">    echo $i</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>该程序输出1-10中的所有奇数。</p><h2 id="16-7-死循环的处理方式"><a href="#16-7-死循环的处理方式" class="headerlink" title="16.7 死循环的处理方式"></a><strong>16.7 死循环的处理方式</strong></h2><p>如果AC Terminal可以打开该程序，则输入<code>Ctrl+c</code>即可。</p><p>否则可以直接关闭进程：</p><p>1.使用top命令找到进程的<code>PID</code><br>2.输入<code>kill -9 PID</code>即可关掉此进程</p><h1 id="17-函数"><a href="#17-函数" class="headerlink" title="17.函数"></a><strong>17.函数</strong></h1><p><code>bash</code>中的函数类似于<code>C/C++</code>中的函数，但<code>return</code>的返回值与<code>C/C++</code>不同，返回的是<code>exit code</code>，取值为<code>0-255</code>，0表示正常结束。</p><p>如果想获取函数的输出结果，可以通过<code>echo</code>输出到<code>stdout</code>中，然后通过<code>$(function_name)</code>来获取<code>stdout</code>中的结果。</p><p>函数的<code>return</code>值可以通过<code>$?</code>来获取。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[function] func_name() &#123;  # function关键字可以省略</span><br><span class="line">    语句1</span><br><span class="line">    语句2</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不获取-return值和stdout值"><a href="#不获取-return值和stdout值" class="headerlink" title="不获取 return值和stdout值"></a>不获取 <code>return</code>值和<code>stdout</code>值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func</span><br></pre></td></tr></table></figure><h3 id="获取-return值和stdout值"><a href="#获取-return值和stdout值" class="headerlink" title="获取 return值和stdout值"></a>获取 <code>return</code>值和<code>stdout</code>值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;</span><br><span class="line">    name=yxc</span><br><span class="line">    echo &quot;Hello $name&quot;</span><br><span class="line"></span><br><span class="line">    return 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output=$(func)</span><br><span class="line">ret=$?</span><br><span class="line"></span><br><span class="line">echo &quot;output = $output&quot;</span><br><span class="line">echo &quot;return = $ret&quot;</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">output = Hello yxc</span><br><span class="line">return = 123</span><br></pre></td></tr></table></figure><h2 id="17-1函数的输入参数"><a href="#17-1函数的输入参数" class="headerlink" title="17.1函数的输入参数"></a><strong>17.1函数的输入参数</strong></h2><p>在函数内，<code>$1</code>表示第一个输入参数，<code>$2</code>表示第二个输入参数，依此类推。</p><p>注意：函数内的<code>$0</code>仍然是文件名，而不是函数名。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">func() &#123;  # 递归计算 $1 + ($1 - 1) + ($1 - 2) + ... + 0</span><br><span class="line">    word=&quot;&quot;</span><br><span class="line">    while [ &quot;$&#123;word&#125;&quot; != &#x27;y&#x27; ] &amp;&amp; [ &quot;$&#123;word&#125;&quot; != &#x27;n&#x27; ]</span><br><span class="line">    do</span><br><span class="line">        read -p &quot;要进入func($1)函数吗？请输入y/n：&quot; word</span><br><span class="line">    done</span><br><span class="line"></span><br><span class="line">    if [ &quot;$word&quot; == &#x27;n&#x27; ]</span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">    if [ $1 -le 0 ] </span><br><span class="line">    then</span><br><span class="line">        echo 0</span><br><span class="line">        return 0</span><br><span class="line">    fi  </span><br><span class="line"></span><br><span class="line">    sum=$(func $(expr $1 - 1))</span><br><span class="line">    echo $(expr $sum + $1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">echo $(func 10)</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>55</code></p><h2 id="17-2函数内的局部变量"><a href="#17-2函数内的局部变量" class="headerlink" title="17.2函数内的局部变量"></a><strong>17.2函数内的局部变量</strong></h2><p>可以在函数内定义局部变量，作用范围仅在当前函数内。</p><p>可以在递归函数中定义局部变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">local 变量名=变量值</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">func() &#123;</span><br><span class="line">    local name=yxc</span><br><span class="line">    echo $name</span><br><span class="line">&#125;</span><br><span class="line">func</span><br><span class="line"></span><br><span class="line">echo $name</span><br></pre></td></tr></table></figure><p>输出结果：</p><p><code>yxc</code></p><p>第一行为函数内的name变量，第二行为函数外调用name变量，会发现此时该变量不存在。</p><h1 id="18-文件重定向"><a href="#18-文件重定向" class="headerlink" title="18.文件重定向"></a><strong>18.文件重定向</strong></h1><p>每个进程默认打开3个文件描述符：</p><p><code>stdin</code>标准输入，从命令行读取数据，文件描述符为0<br><code>stdout</code>标准输出，向命令行输出数据，文件描述符为1<br><code>stderr</code>标准错误输出，向命令行输出数据，文件描述符为2<br>可以用文件重定向将这三个文件重定向到其他文件中。</p><p><img src="https://img-1314486531.cos.ap-shanghai.myqcloud.com/%E9%87%8D%E5%AE%9A%E5%90%91%E5%91%BD%E4%BB%A4%E5%88%97%E8%A1%A8.png" alt="重定向命令列表"></p><h2 id="输入和输出重定向"><a href="#输入和输出重定向" class="headerlink" title="输入和输出重定向"></a>输入和输出重定向</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">echo -e &quot;Hello \c&quot; &gt; output.txt  # 将stdout重定向到output.txt中</span><br><span class="line">echo &quot;World&quot; &gt;&gt; output.txt  # 将字符串追加到output.txt中</span><br><span class="line"></span><br><span class="line">read str &lt; output.txt  # 从output.txt中读取字符串</span><br><span class="line"></span><br><span class="line">echo $str  # 输出结果：Hello World</span><br></pre></td></tr></table></figure><h2 id="同时重定向stdin和stdout"><a href="#同时重定向stdin和stdout" class="headerlink" title="同时重定向stdin和stdout"></a>同时重定向<code>stdin</code>和<code>stdout</code></h2><p>创建bash脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line"></span><br><span class="line">echo $(expr &quot;$a&quot; + &quot;$b&quot;)</span><br></pre></td></tr></table></figure><p>创建input.txt，里面的内容为：</p><p><code>3 4</code></p><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test.sh  # 添加可执行权限</span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test.sh &lt; input.txt &gt; output.txt  # 从input.txt中读取内容，将输出写入output.txt中</span><br><span class="line">acs@9e0ebfcd82d7:~$ cat output.txt  # 查看output.txt中的内容</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h1 id="19-引入外部脚本"><a href="#19-引入外部脚本" class="headerlink" title="19.引入外部脚本"></a><strong>19.引入外部脚本</strong></h1><p>类似于<code>C/C++</code>中的<code>include</code>操作，<code>bash</code>也可以引入其他文件中的代码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">. filename  # 注意点和文件名之间有一个空格</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line">source filename</span><br></pre></td></tr></table></figure><p><strong>示例</strong></p><p>创建<code>test1.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">name=yxc  # 定义变量name</span><br></pre></td></tr></table></figure><p>然后创建<code>test2.sh</code>，内容为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">! /bin/bash</span></span><br><span class="line"></span><br><span class="line">source test1.sh # 或 . test1.sh</span><br><span class="line"></span><br><span class="line">echo My name is: $name  # 可以使用test1.sh中的变量</span><br></pre></td></tr></table></figure><p>执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">acs@9e0ebfcd82d7:~$ chmod +x test2.sh </span><br><span class="line">acs@9e0ebfcd82d7:~$ ./test2.sh </span><br><span class="line">My name is: yxc</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux相关基本操作</title>
      <link href="/posts/f5832c0/"/>
      <url>/posts/f5832c0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍"></a>常用命令介绍</h1><p>(1) <code>ctrl c</code>: 取消命令，并且换行<br>(2) <code>ctrl u</code>: 清空本行命令<br>(3) tab键：可以补全命令和文件名，如果补全不了快速按两下tab键，可以显示备选选项<br>(4) <code>ls</code>: 列出当前目录下所有文件，蓝色的是文件夹，白色的是普通文件，绿色的是可执行文件<br>(5) <code>pwd</code>: 显示当前路径<br>(6) <code>cd XXX</code>: 进入XXX目录下, cd .. 返回上层目录<br>(7) <code>cp XXX YYY</code>: 将XXX文件复制成YYY，XXX和YYY可以是一个路径，比如..&#x2F;dir_c&#x2F;a.txt，表示上层目录下的dir_c文件夹下的文件a.txt<br>(8) <code>mkdir XXX</code>: 创建目录XXX<br>(9) <code>rm XXX</code>: 删除普通文件;  <code>rm XXX -r</code>: 删除文件夹<br>(10) <code>mv XXX YYY</code>: 将XXX文件移动到YYY，和cp命令一样，XXX和YYY可以是一个路径；重命名也是用这个命令<br>(11) <code>touch XXX</code>: 创建一个文件<br>(12) <code>cat XXX</code>: 展示文件XXX中的内容<br>(13) 复制文本     windows&#x2F;Linux下：Ctrl + insert<br>(14) 粘贴文本     windows&#x2F;Linux下：Shift + insert</p><h1 id="tumx和vim"><a href="#tumx和vim" class="headerlink" title="tumx和vim"></a>tumx和vim</h1><h2 id="tmux教程"><a href="#tmux教程" class="headerlink" title="tmux教程"></a>tmux教程</h2><h3 id="功能："><a href="#功能：" class="headerlink" title="功能："></a>功能：</h3><p>(1) 分屏。<br>(2) 允许断开Terminal连接后，继续运行进程。</p><h3 id="结构："><a href="#结构：" class="headerlink" title="结构："></a>结构：</h3><p> 一个tmux可以包含多个session，一个session可以包含多个window，一个window可以包含多个pane。</p><h3 id="操作"><a href="#操作" class="headerlink" title="操作:"></a>操作:</h3><p>(1) <code>tmux</code>：新建一个session，其中包含一个window，window中包含一个pane，pane里打开了一个shell对话框。<br>(2) 按下<code>Ctrl + a</code>后手指松开，然后按<code>%</code>：将当前pane左右平分成两个pane。<br>(3) 按下<code>Ctrl + a</code>后手指松开，然后按<code>&quot;</code>（注意是双引号”）：将当前pane上下平分成两个pane。<br>(4) <code>Ctrl + d</code>：关闭当前pane；如果当前window的所有pane均已关闭，则自动关闭window；如果当前session的所有window均已关闭，则自动关闭session。<br>(5) 鼠标点击可以选pane。<br>(6) 按下<code>ctrl + a</code>后手指松开，然后按方向键：选择相邻的pane。<br>(7) 鼠标拖动pane之间的分割线，可以调整分割线的位置。<br>(8) 按住<code>ctrl + a</code>的同时按方向键，可以调整pane之间分割线的位置。<br>(9) 按下<code>ctrl + a</code>后手指松开，然后按<code>z</code>：将当前pane全屏&#x2F;取消全屏。<br>(10) 按下<code>ctrl + a</code>后手指松开，然后按<code>d</code>：挂起当前session。<br>(11) <code>tmux a</code>：打开之前挂起的session。<br>(12) 按下<code>ctrl + a</code>后手指松开，然后按<code>s</code>：选择其它session。<br>    方向键 —— 上：选择上一项 session&#x2F;window&#x2F;pane<br>    方向键 —— 下：选择下一项 session&#x2F;window&#x2F;pane<br>    方向键 —— 右：展开当前项 session&#x2F;window<br>    方向键 —— 左：闭合当前项 session&#x2F;window<br>(13) 按下<code>Ctrl + a</code>后手指松开，然后按<code>c</code>：在当前session中创建一个新的window。<br>(14) 按下<code>Ctrl + a</code>后手指松开，然后按<code>w</code>：选择其他window，操作方法与(12)完全相同。<br>(15) 按下<code>Ctrl + a</code>后手指松开，然后按<code>PageUp</code>：翻阅当前pane内的内容。<br>(16) 鼠标滚轮：翻阅当前pane内的内容。<br>(17) 在tmux中选中文本时，需要按住<code>shift</code>键。<br>(18) tmux中复制&#x2F;粘贴文本的通用方式：<br>    (1) 按下<code>Ctrl + a</code>后松开手指，然后按<code>[</code><br>    (2) 用鼠标选中文本，被选中的文本会被自动复制到tmux的剪贴板<br>    (3) 按下<code>Ctrl + a</code>后松开手指，然后按<code>]</code>，会将剪贴板中的内容粘贴到光标处  </p><h2 id="vim教程"><a href="#vim教程" class="headerlink" title="vim教程"></a>vim教程</h2><h3 id="功能：-1"><a href="#功能：-1" class="headerlink" title="功能："></a>功能：</h3><p>(1) 命令行模式下的文本编辑器。<br>(2) 根据文件扩展名自动判别编程语言。支持代码缩进、代码高亮等功能。<br>(3) 使用方式：vim filename<br>    如果已有该文件，则打开它。<br>    如果没有该文件，则打开个一个新的文件，并命名为filename</p><h3 id="模式："><a href="#模式：" class="headerlink" title="模式："></a>模式：</h3><p>(1) 一般命令模式<br>默认模式。命令输入方式：类似于打游戏放技能，按不同字符，即可进行不同操作。可以复制、粘贴、删除文本等。<br>(2) 编辑模式<br>    在一般命令模式里按下i，会进入编辑模式。<br>    按下ESC会退出编辑模式，返回到一般命令模式。<br>(3) 命令行模式<br>    在一般命令模式里按下:&#x2F;?三个字母中的任意一个，会进入命令行模式。命令行在最下面。<br>    可以查找、替换、保存、退出、配置编辑器等。</p><h3 id="操作："><a href="#操作：" class="headerlink" title="操作："></a>操作：</h3><p>(1) <code>i</code>：进入编辑模式<br>(2) <code>ESC</code>：进入一般命令模式<br>(3) <code>h</code> 或 <code>左箭头</code>：光标向左移动一个字符<br>(4) <code>j</code> 或 <code>下箭头</code>：光标向下移动一个字符<br>(5) <code>k</code> 或 <code>上箭头</code>：光标向上移动一个字符<br>(6) <code>l</code> 或 <code>右箭头</code>：光标向右移动一个字符<br>(7) <code>n&lt;Space&gt;</code>：n表示数字，按下数字后再按空格，光标会向右移动这一行的n个字符<br>(8) <code>0</code> 或 <code>功能键[Home]</code>：光标移动到本行开头<br>(9) <code>$</code> 或 <code>功能键[End]</code>：光标移动到本行末尾<br>(10)<code>G</code>：光标移动到最后一行<br>(11) <code>:n</code> 或 <code>nG</code>：n为数字，光标移动到第n行<br>(12) <code>gg</code>：光标移动到第一行，相当于1G<br>(13) <code>n&lt;Enter&gt;</code>：n为数字，光标向下移动n行<br>(14) <code>/word</code>：向光标之下寻找第一个值为word的字符串。<br>(15) <code>?word</code>：向光标之上寻找第一个值为word的字符串。<br>(16) <code>n</code>：重复前一个查找操作<br>(17) <code>N</code>：反向重复前一个查找操作<br>(18) <code>:n1,n2s/word1/word2/g</code>：n1与n2为数字，在第n1行与n2行之间寻找word1这个字符串，并将该字符串替换为word2<br>(19) <code>:1,$s/word1/word2/g</code>：将全文的word1替换为word2<br>(20) <code>:1,$s/word1/word2/gc</code>：将全文的word1替换为word2，且在替换前要求用户确认。<br>(21) <code>v</code>：选中文本<br>(22) <code>d</code>：删除选中的文本<br>(23) <code>dd</code>: 删除当前行<br>(24) <code>y</code>：复制选中的文本<br>(25) <code>yy</code>: 复制当前行<br>(26) <code>p</code>: 将复制的数据在光标的下一行&#x2F;下一个位置粘贴<br>(27) <code>u</code>：撤销<br>(28) <code>Ctrl + r</code>：取消撤销<br>(29) <code>&gt;</code>：将选中的文本整体向右缩进一次<br>(30) <code>&lt;</code>：将选中的文本整体向左缩进一次<br>(31) <code>:w</code> 保存<br>(32) <code>:w!</code> 强制保存<br>(33) <code>:q</code> 退出<br>(34) <code>:q!</code> 强制退出<br>(35) <code>:wq</code> 保存并退出<br>(36) <code>:set paste</code> 设置成粘贴模式，取消代码自动缩进<br>(37) <code>:set nopaste</code> 取消粘贴模式，开启代码自动缩进<br>(38) <code>:set nu</code> 显示行号<br>(39) <code>:set nonu</code> 隐藏行号<br>(40) <code>gg=G</code>：将全文代码格式化<br>(41) <code>:noh</code> 关闭查找关键词高亮<br>(42) <code>Ctrl + q</code>：当vim卡死时，可以取消当前正在执行的命令<br>(43) 异常处理：<br>每次用vim编辑文件时，会自动创建一个.filename.swp的临时文件。<br>如果打开某个文件时，该文件的swp文件已存在，则会报错。此时解决办法有两种：<br>(1) 找到正在打开该文件的程序，并退出<br>(2) 直接删掉该swp文件即可  </p>]]></content>
      
      
      <categories>
          
          <category> Linux相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vim tmux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新日志</title>
      <link href="/posts/5a717bf0/"/>
      <url>/posts/5a717bf0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="2022-10-25日更新日志"><a href="#2022-10-25日更新日志" class="headerlink" title="2022-10-25日更新日志"></a>2022-10-25日更新日志</h1><p> 测试版正式推送至GitHub<br> 主要用于测试各功能是否可用，及上传GitHub测试</p><h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><h3 id="Spawn-failed"><a href="#Spawn-failed" class="headerlink" title="Spawn failed"></a><code>Spawn failed</code></h3><p>出现的问题：未成功连接至GitHub<br>解决方法：</p><p><code>ssh -T git@github.com</code><br>检查是否可连接至Github<br>若出现<br><code>git@github.com: Permission denied (publickey).</code><br>原因：<br>密钥未添加到GitHub<br>添加重连即可</p><h2 id="推送方法"><a href="#推送方法" class="headerlink" title="推送方法"></a>推送方法</h2><p><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo deploy</code></p><h2 id="博客生成，页面生成"><a href="#博客生成，页面生成" class="headerlink" title="博客生成，页面生成"></a>博客生成，页面生成</h2><p>博客 <code>hexo new 名字  </code><br>页面 <code>hexo new page 名字 </code></p><h1 id="2022年10月26日更新日志"><a href="#2022年10月26日更新日志" class="headerlink" title="2022年10月26日更新日志"></a>2022年10月26日更新日志</h1><p>更新了相册功能<br>现在可以通过点击<a href="https://pcyprivate.cn/Gallery/">相册</a>，进入查看</p><h2 id="遇到的问题-1"><a href="#遇到的问题-1" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p>图片路径设置错误导致无法正常访问</p><h1 id="2022年10月28日更新"><a href="#2022年10月28日更新" class="headerlink" title="2022年10月28日更新"></a>2022年10月28日更新</h1><p>更新音乐播放功能</p><h2 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h2><p>Aplayer配置失败 无法开启播放功能</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p><a href="https://blog.csdn.net/qq_46435629/article/details/106295515">点击查看</a></p><h1 id="2022年10月29日更新"><a href="#2022年10月29日更新" class="headerlink" title="2022年10月29日更新"></a>2022年10月29日更新</h1><p>更新 导航栏  及搜索功能</p><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://yisous.xyz/posts/895003b5/">导航栏参考博客</a>  </p><p>搜索功能基于Butterfly主题实现 <a href="https://butterfly.js.org/posts/ceeb73f/#%E6%90%9C%E7%B4%A2%E7%B3%BB%E7%B5%B1">链接</a></p><h1 id="2022年10月30日更新"><a href="#2022年10月30日更新" class="headerlink" title="2022年10月30日更新"></a>2022年10月30日更新</h1><p>更新了页面评论系统  </p><h2 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h2><p>在使用Twikoo评论时遇到 评论失败的问题，在<a href="https://www.lcoo.cc/">大佬</a>的耐心帮助下，最终问题得以解决  </p><h3 id="再次感谢大佬的倾囊相助！"><a href="#再次感谢大佬的倾囊相助！" class="headerlink" title="再次感谢大佬的倾囊相助！"></a>再次感谢大佬的倾囊相助！</h3><h1 id="至2022年11月13日更新"><a href="#至2022年11月13日更新" class="headerlink" title="至2022年11月13日更新"></a>至2022年11月13日更新</h1><p>评论系统出现了问题，只能在本地管理，无法云端管理，目前还没找到解决方法，所以暂时关闭留言面板<br>网站已部署至个人服务器及域名，可通过国内服务器访问，提高了加载速度<br>基于腾讯cos和PicGo构建了图床，提高了图片访问速度，方便图片管理<br>修复了一些小问题<br>正式上线</p>]]></content>
      
      
      <categories>
          
          <category> 更新日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 更新日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在前面</title>
      <link href="/posts/ca8bfdf3/"/>
      <url>/posts/ca8bfdf3/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\css\APlayer.min.css"><script src="\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\js\Meting.min.js"></script><h1 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h1><p>本博客是基于<a href="https://hexo.io/zh-cn/">hexo</a>框架<a href="https://butterfly.js.org/">butterfly</a>主题搭建的，部分美化和修改基于<a href="https://butterfly.zhheo.com/">美化教程</a>，在搭建过程中还得到了一些大佬的帮助，在此一并感谢!（<a href="https://pcyprivate.cn/link/">友情链接</a>） </p><h1 id="为什么要搭建自己的博客"><a href="#为什么要搭建自己的博客" class="headerlink" title="为什么要搭建自己的博客"></a>为什么要搭建自己的博客</h1><p>这个博客就是一个静态的网站，又使用了成熟的框架，而且我自己也没改多少内容，改的一部分也是基于别人的教程，所以想复现我的博客也很容易。那么我为啥还要“浪费时间”弄这个呢？<br>我觉得不是做所有的事都是为了“意义”而去的，弄这个也只算我的一个兴趣爱好，即使是使用的别人的框架和主题，从写第一篇博客开始，到参照主题教程逐步完善基础功能，再到部署至Github；从租服务器，到购买域名完成网站备案，再到构建图床；在这些过程中我也是收获满满 也许这就是我的答案吧</p><h1 id="博客会更新哪些内容"><a href="#博客会更新哪些内容" class="headerlink" title="博客会更新哪些内容"></a>博客会更新哪些内容</h1><p>至此我想要实现的基本内容都已完成，魔改对我来说没有啥必要也太难，我只想实现一些基础功能，所以博客基本不会大改了<br>后续博客内容会更新我的学习过程（包括但不限于算法学习，考研等），其他内容待定，更新时间完全随缘，欢迎催更~~~</p><h1 id="联系我"><a href="#联系我" class="headerlink" title="联系我"></a>联系我</h1><p>如果您有意见和建议、愿意和我一同探讨搭建过程（其实我会的不多）、或者愿意指导我，请与我联系吧</p><h2 id="QQ：1533835754"><a href="#QQ：1533835754" class="headerlink" title="QQ：1533835754"></a>QQ：1533835754</h2><h2 id="邮箱：-112-99-x79-x70-114-105-118-x61-116-101-64-118-x69-112-x2e-x71-113-46-x63-111-x6d"><a href="#邮箱：-112-99-x79-x70-114-105-118-x61-116-101-64-118-x69-112-x2e-x71-113-46-x63-111-x6d" class="headerlink" title="邮箱：&#112;&#99;&#x79;&#x70;&#114;&#105;&#118;&#x61;&#116;&#101;&#64;&#118;&#x69;&#112;&#x2e;&#x71;&#113;&#46;&#x63;&#111;&#x6d;"></a>邮箱：<a href="mailto:&#112;&#99;&#x79;&#x70;&#114;&#105;&#118;&#x61;&#116;&#101;&#64;&#118;&#x69;&#112;&#x2e;&#x71;&#113;&#46;&#x63;&#111;&#x6d;">&#112;&#99;&#x79;&#x70;&#114;&#105;&#118;&#x61;&#116;&#101;&#64;&#118;&#x69;&#112;&#x2e;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a></h2>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
